// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class ChangeApproveStatus extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ChangeApproveStatus entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type ChangeApproveStatus must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ChangeApproveStatus", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): ChangeApproveStatus | null {
    return changetype<ChangeApproveStatus | null>(
      store.get("ChangeApproveStatus", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get appId(): string {
    let value = this.get("appId");
    return value!.toString();
  }

  set appId(value: string) {
    this.set("appId", Value.fromString(value));
  }

  get receipeId(): string {
    let value = this.get("receipeId");
    return value!.toString();
  }

  set receipeId(value: string) {
    this.set("receipeId", Value.fromString(value));
  }

  get signId(): BigInt {
    let value = this.get("signId");
    return value!.toBigInt();
  }

  set signId(value: BigInt) {
    this.set("signId", Value.fromBigInt(value));
  }

  get approveStatus(): boolean {
    let value = this.get("approveStatus");
    return value!.toBoolean();
  }

  set approveStatus(value: boolean) {
    this.set("approveStatus", Value.fromBoolean(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class SignContractCreated extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SignContractCreated entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type SignContractCreated must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("SignContractCreated", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): SignContractCreated | null {
    return changetype<SignContractCreated | null>(
      store.get("SignContractCreated", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get appId(): string {
    let value = this.get("appId");
    return value!.toString();
  }

  set appId(value: string) {
    this.set("appId", Value.fromString(value));
  }

  get receipeId(): string {
    let value = this.get("receipeId");
    return value!.toString();
  }

  set receipeId(value: string) {
    this.set("receipeId", Value.fromString(value));
  }

  get signId(): BigInt {
    let value = this.get("signId");
    return value!.toBigInt();
  }

  set signId(value: BigInt) {
    this.set("signId", Value.fromBigInt(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get required(): BigInt {
    let value = this.get("required");
    return value!.toBigInt();
  }

  set required(value: BigInt) {
    this.set("required", Value.fromBigInt(value));
  }

  get uri(): string {
    let value = this.get("uri");
    return value!.toString();
  }

  set uri(value: string) {
    this.set("uri", Value.fromString(value));
  }

  get owners(): Array<Bytes> {
    let value = this.get("owners");
    return value!.toBytesArray();
  }

  set owners(value: Array<Bytes>) {
    this.set("owners", Value.fromBytesArray(value));
  }

  get safeAddress(): Bytes {
    let value = this.get("safeAddress");
    return value!.toBytes();
  }

  set safeAddress(value: Bytes) {
    this.set("safeAddress", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class SignatureAdded extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SignatureAdded entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type SignatureAdded must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("SignatureAdded", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): SignatureAdded | null {
    return changetype<SignatureAdded | null>(
      store.get("SignatureAdded", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get appId(): string {
    let value = this.get("appId");
    return value!.toString();
  }

  set appId(value: string) {
    this.set("appId", Value.fromString(value));
  }

  get receipeId(): string {
    let value = this.get("receipeId");
    return value!.toString();
  }

  set receipeId(value: string) {
    this.set("receipeId", Value.fromString(value));
  }

  get signId(): BigInt {
    let value = this.get("signId");
    return value!.toBigInt();
  }

  set signId(value: BigInt) {
    this.set("signId", Value.fromBigInt(value));
  }

  get signature(): string {
    let value = this.get("signature");
    return value!.toString();
  }

  set signature(value: string) {
    this.set("signature", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}
